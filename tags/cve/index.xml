<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cve on SixSixtySix Corp.</title><link>https://6sixty6.github.io/tags/cve/</link><description>Recent content in cve on SixSixtySix Corp.</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 19 Feb 2022 09:00:00 +0000</lastBuildDate><atom:link href="https://6sixty6.github.io/tags/cve/index.xml" rel="self" type="application/rss+xml"/><item><title>CVE-2022-25265 - Executable Space Protection Bypass</title><link>https://6sixty6.github.io/posts/2022-02-19-cve-2022-25265-executable-space-protection-bypass/</link><pubDate>Sat, 19 Feb 2022 09:00:00 +0000</pubDate><guid>https://6sixty6.github.io/posts/2022-02-19-cve-2022-25265-executable-space-protection-bypass/</guid><description>author:[xoreaxeax] As it turns out, binary files built either under old Linux systems lacking NX or IA32 systems with NX,
which do NOT create PT_GNU_STACK header will be marked and treated with exec-all personality flag by the Linux kernel.
This allows for read/write/exec of bytes located in supposedly non-executable and non-writable regions of binary files, therefore completely bypassing executable-space protection.
The flawed implementation can be found here: https://github.com/torvalds/linux/blob/master/arch/x86/include/asm/elf.h#L280
To achieve this, &amp;ldquo;historical&amp;rdquo; building tools will be used for building the binary.</description></item></channel></rss>